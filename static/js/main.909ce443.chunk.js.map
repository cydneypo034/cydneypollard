{"version":3,"sources":["components/navigationbar.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Form","inline","FormControl","type","placeholder","Button","variant","React","Component","Home","App","path","exact","component","home","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yUA8BeA,E,iLAzBP,OACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,OAAO,MAC1B,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,KAAnB,QACA,kBAACJ,EAAA,EAAOK,OAAR,CAAeC,gBAAc,qBAC7B,kBAACN,EAAA,EAAOO,SAAR,CAAiBC,GAAG,oBAClB,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACb,kBAACD,EAAA,EAAIE,KAAL,CAAUP,KAAK,UAAf,SACA,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,cAAf,aACA,kBAACQ,EAAA,EAAD,CAAaC,MAAM,OAAOL,GAAG,sBAC3B,kBAACI,EAAA,EAAYE,KAAb,CAAkBV,KAAK,WAAvB,UACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,iDAAvB,uBACA,kBAACQ,EAAA,EAAYE,KAAb,CAAkBV,KAAK,kCAAvB,WAEF,kBAACK,EAAA,EAAIE,KAAL,CAAUP,KAAK,YAAf,YAEF,kBAACW,EAAA,EAAD,CAAMC,QAAM,GACV,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAAST,UAAU,YACxD,kBAACU,EAAA,EAAD,CAAQC,QAAQ,mBAAhB,iB,GAnBcC,IAAMC,W,gBCiCnBC,E,iLAhCP,OACI,6BACI,yBAAKd,UAAU,gBACf,6BAASA,UAAU,cACnB,yBAAKA,UAAU,aAEX,wBAAIA,UAAU,eAAd,cAIA,wBAAIA,UAAU,gBAAd,kBAEA,wBAAIA,UAAU,gBAAd,kBAEA,wBAAIA,UAAU,eAAd,uGACoG,6BADpG,uN,GAhBDY,IAAMC,WCeVE,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWC,OCCrBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.909ce443.chunk.js","sourcesContent":["import React from 'react';\nimport {Navbar, Nav, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\n\nclass NavigationBar extends React.Component {\n    render() {\n        return (\n          <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"/\">Home</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link href=\"/about\">About</Nav.Link>\n              <Nav.Link href=\"/portfolio\">Portfolio</Nav.Link>\n              <NavDropdown title=\"More\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"/skills\">Skills</NavDropdown.Item>\n                <NavDropdown.Item href=\"https://cydneypollarddesigns.myportfolio.com/\">Graphic Design Work</NavDropdown.Item>\n                <NavDropdown.Item href=\"https://github.com/cydneypo034\">Github</NavDropdown.Item>\n              </NavDropdown>\n              <Nav.Link href=\"/contact\">Contact</Nav.Link>\n            </Nav>\n            <Form inline>\n              <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n              <Button variant=\"outline-success\">Search</Button>\n            </Form>\n          </Navbar.Collapse>\n        </Navbar>\n        )\n    }\n}\n\nexport default NavigationBar;","import React from 'react';\n\nclass Home extends React.Component {\n    render() {\n        return (\n            <div>\n                <div className=\"tinted-image\">\n                <section className=\"hero is-md\">\n                <div className=\"hero-body\">\n\n                    <h2 className=\"para-center\">\n                        my name is\n                    </h2>\n                    \n                    <h1 className=\"text-center3\">cydney pollard</h1>\n\n                    <h1 className=\"text-center2\">cydney pollard</h1>\n\n                    <h2 className=\"para-center\">\n                    I'm a software engineer with a background in graphic design, currently residing in Orlando, Florida.<br></br>\n                    You can find my software engineering work on Github. If you'd like to view graphic design work, \n                    feel free to visit my Adobe Portfolio. If you would like to work with me, shoot me an email and let's talk!\n                    </h2>\n\n\n                </div>\n                </section>\n                </div>\n\n\n            \n            </div>\n        )\n    }\n}\n\nexport default Home;","import React from 'react';\nimport './App.css';\nimport Navigation from './components/navigationbar.js';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport home from './components/home.js';\n\nfunction App() {\n  return (\n    <HashRouter> \n      <Navigation />\n      <Switch>\n        <Route path=\"/\" exact component={home} />\n      </Switch>\n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}